{"version":3,"file":"authenticator.js","sources":["../../../src/libs/authenticator.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n    confirmPasswordReset,\r\n    getAuth,\r\n    getIdToken,\r\n    onAuthStateChanged,\r\n    sendPasswordResetEmail,\r\n    signInWithEmailAndPassword,\r\n    signOut,\r\n    updatePassword,\r\n    verifyPasswordResetCode,\r\n    Auth,\r\n    User,\r\n    UserCredential\r\n} from \"firebase/auth\";\r\n\r\nconst app = initializeApp({\r\n    apiKey: process.env.NEXT_PUBLIC_API_KEY,\r\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_DOMAIN\r\n});\r\n\r\nclass Authenticator {\r\n    private auth: Auth;\r\n\r\n    constructor(){\r\n        this.auth = getAuth(app);\r\n        this.auth.useDeviceLanguage();\r\n    }\r\n\r\n    getCurrentUser(): Promise<User | null>{\r\n        return new Promise((resolve, reject) => { \r\n            onAuthStateChanged(this.auth, async (user) => {\r\n                if(user) resolve(user);\r\n                else resolve(null);\r\n            });\r\n        });\r\n    }\r\n\r\n    getCurrentToken() : Promise<string | null>{\r\n        const user = this.auth.currentUser;\r\n      \r\n        return new Promise((resolve, reject) =>{\r\n            if(user){\r\n                getIdToken(user, true)\r\n                    .then(token =>  resolve(token))\r\n                    .catch(error => reject(error));\r\n            }\r\n\r\n            resolve(null);\r\n        });\r\n        \r\n    }\r\n\r\n    recoveryPassword(code: string, password: string) : Promise<string>{\r\n        return new Promise((resolve, reject) => {\r\n            verifyPasswordResetCode(this.auth, code)\r\n                .then(email => {\r\n                    confirmPasswordReset(this.auth, code, password)\r\n                        .then(response => resolve(email))\r\n                        .catch(error => reject(error))\r\n                })\r\n                .catch(error => reject(error))\r\n        });\r\n    }\r\n\r\n    sendRecoverPassword(email:string , authURL: string) : Promise<string>{\r\n        return new Promise((resolve, reject) =>{\r\n            sendPasswordResetEmail(this.auth, email, {\r\n                url: authURL + \"?email=\" + email\r\n            })\r\n                .then(result => resolve(\"SUCCESS\"))\r\n                .catch(error => reject(error))\r\n        });\r\n    }\r\n\r\n    signIn(email: string, password: string): Promise<UserCredential>{\r\n        return new Promise((resolve, reject) => {\r\n            signInWithEmailAndPassword(this.auth, email, password)\r\n                .then(credentials => resolve(credentials))\r\n                .catch(error => reject(error))\r\n        });\r\n    }\r\n\r\n    signOut(): Promise<boolean>{\r\n        return new Promise((resolve, reject) => {\r\n            signOut(this.auth)\r\n                .then(() => resolve(true))\r\n                .catch(error => reject(error))\r\n        });\r\n    }\r\n\r\n    translateError(error: any){\r\n        switch(error.code){\r\n            case 'auth/invalid-credential':\r\n                return 'Usuário ou senha inválidos';\r\n            case 'auth/invalid-email':\r\n                return 'Email inválido.';\r\n            case 'auth/missing-password':\r\n                return 'Senha inválida.';\r\n            case 'auth/network-request-failed':\r\n                return 'Sem conexão com a internet.'\r\n            case 'auth/user-disabled':\r\n                return 'Usuário desabilitado.';\r\n            case 'auth/too-many-requests':\r\n                let message = \"\";    \r\n                message = 'Acesso a conta foi temporariamente suspenso,\\n';\r\n                message += 'devido a muitas tentativas de login.\\n';\r\n                message += 'É possivel restaurar o acesso imediatamente\\n';\r\n                message += 'recuperando sua senha ou você pode tentar novamente mais tarde.'     \r\n                return message;\r\n            default:\r\n                return error.message;\r\n        }\r\n    }\r\n\r\n    updatePassword(newPass: string): Promise<boolean>{\r\n        const user = this.auth.currentUser;\r\n        return new Promise((resolve, reject) => {\r\n            if(user){\r\n                updatePassword(user, newPass)\r\n                    .then(() => resolve(true))\r\n                    .catch((error) => reject(error))\r\n            }\r\n\r\n            return false;  \r\n        });\r\n    }\r\n}\r\n\r\nexport default Authenticator;"],"names":[],"mappings":"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"}